(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{777:function(s,t,a){"use strict";a.r(t);var r=a(1),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-命令查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-命令查询"}},[s._v("#")]),s._v(" Docker 命令查询")]),s._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),a("p",[s._v("Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。")]),s._v(" "),a("ul",[a("li",[s._v("客户端命令：基本命令格式为 "),a("code",[s._v("docker [OPTIONS] COMMAND [arg...]")]),s._v("；")]),s._v(" "),a("li",[s._v("服务端命令：基本命令格式为 "),a("code",[s._v("dockerd [OPTIONS]")]),s._v("。")])]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("man docker")]),s._v(" 或 "),a("code",[s._v("docker help")]),s._v(" 来查看这些命令。")]),s._v(" "),a("h2",{attrs:{id:"客户端命令选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端命令选项"}},[s._v("#")]),s._v(" 客户端命令选项")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("--config"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：指定客户端配置文件，默认为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/.docker"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n-D"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否使用 debug 模式。默认不开启；\n-H, --host"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字（unix:///path/to/socket），文件句柄（fd://socketfd）或 tcp 套接字（tcp://"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("），默认为 unix:///var/run/docker.sock；\n-l, --log-level"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"debug|info|warn|error|fatal"')]),s._v("：指定日志输出级别；\n--tls"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；\n--tlscacert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/ca.pem：TLS CA 签名的可信证书文件路径；\n--tlscert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/cert.pem：TLS 可信证书文件路径；\n--tlscert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/key.pem：TLS 密钥文件路径；\n--tlsverify"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：启用 TLS 校验，默认为否。\n")])])]),a("h2",{attrs:{id:"dockerd-命令选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerd-命令选项"}},[s._v("#")]),s._v(" dockerd 命令选项")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("--api-cors-header"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 “*”；\n--authorization-plugin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：载入认证的插件；\n-b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：将容器挂载到一个已存在的网桥上。指定为 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'none'")]),s._v(" 时则禁用容器的网络，与 --bip 选项互斥；\n--bip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：让动态创建的 docker0 网桥采用给定的 CIDR 地址"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 与 -b 选项互斥；\n--cgroup-parent"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：指定 cgroup 的父组，默认 fs cgroup 驱动为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/docker"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("，systemd cgroup 驱动为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("system.slice"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n--cluster-store"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：构成集群（如 Swarm）时，集群键值数据库服务地址；\n--cluster-advertise"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：构成集群时，自身的被访问地址，可以为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("host:port"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" 或 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("interface:port"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n--cluster-store-opt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：构成集群时，键值数据库的配置选项；\n--config-file"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/docker/daemon.json"')]),s._v("：daemon 配置文件路径；\n--containerd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：containerd 文件的路径；\n-D, --debug"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否使用 Debug 模式。缺省为 false；\n--default-gateway"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：容器的 IPv4 网关地址，必须在网桥的子网段内；\n--default-gateway-v6"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：容器的 IPv6 网关地址；\n--default-ulimit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：默认的 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" 值；\n--disable-legacy-registry"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否允许访问旧版本的镜像仓库服务器；\n--dns"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：指定容器使用的 DNS 服务器地址；\n--dns-opt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：DNS 选项；\n--dns-search"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：DNS 搜索域；\n--exec-opt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：运行时的执行选项；\n--exec-root"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：容器执行状态文件的根路径，默认为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/var/run/docker"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n--fixed-cidr"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：限定分配 IPv4 地址范围；\n--fixed-cidr-v6"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：限定分配 IPv6 地址范围；\n-G, --group"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：分配给 unix 套接字的组，默认为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("docker"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n-g, --graph"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：Docker 运行时的根路径，默认为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/var/lib/docker"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n-H, --host"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字（unix:///path/to/socket），文件句柄（fd://socketfd）或 tcp 套接字（tcp://"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("），默认为 unix:///var/run/docker.sock；\n--icc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。\n--insecure-registry"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：允许访问给定的非安全仓库服务；\n--ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：绑定容器端口时候的默认 IP 地址。缺省为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0；\n--ip-forward"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；\n--ip-masq"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否进行地址伪装，用于容器访问外部网络，默认开启；\n--iptables"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否允许 Docker 添加 iptables 规则。缺省为 true；\n--ipv6"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否启用 IPv6 支持，默认关闭；\n-l, --log-level"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"debug|info|warn|error|fatal"')]),s._v("：指定日志输出级别；\n--label"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[]"')]),s._v("：添加指定的键值对标注；\n--log-driver"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none"')]),s._v("：指定日志后端驱动，默认为 json-file；\n--log-opt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：日志后端的选项；\n--mtu"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("VALUE：指定容器网络的 mtu；\n-p"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：指定 daemon 的 PID 文件路径。缺省为 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("/var/run/docker.pid"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("；\n--raw-logs：输出原始，未加色彩的日志信息；\n--registry-mirror"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("scheme"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("://"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("host"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("：指定 "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("docker pull"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" 时使用的注册服务器镜像地址；\n-s, --storage-driver"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("：指定使用给定的存储后端；\n--selinux-enabled"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；\n--storage-opt"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：驱动后端选项；\n--tls"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否对 Docker daemon 启用 TLS 安全机制，默认为否；\n--tlscacert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/ca.pem：TLS CA 签名的可信证书文件路径；\n--tlscert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/cert.pem：TLS 可信证书文件路径；\n--tlscert"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /.docker/key.pem：TLS 密钥文件路径；\n--tlsverify"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：启用 TLS 校验，默认为否；\n--userland-proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("false：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；\n--userns-remap"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("uid:gid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("user:group"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("uid：指定容器的用户命名空间，默认是创建新的 "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("UID")]),s._v(" 和 GID 映射到容器内进程。\n")])])]),a("h2",{attrs:{id:"客户端命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端命令"}},[s._v("#")]),s._v(" 客户端命令")]),s._v(" "),a("p",[s._v("可以通过 "),a("code",[s._v("docker COMMAND --help")]),s._v(" 来查看这些命令的具体用法。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("attach：依附到一个正在运行的容器中；\nbuild：从一个 Dockerfile 创建一个镜像；\ncommit：从一个容器的修改中创建一个新的镜像；\ncp：在容器和本地宿主系统之间复制文件中；\ncreate：创建一个新容器，但并不运行它；\ndiff：检查一个容器内文件系统的修改，包括修改和增加；\nevents：从服务端获取实时的事件；\nexec：在运行的容器内执行命令；\nexport：导出容器内容为一个 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" 包；\nhistory：显示一个镜像的历史信息；\nimages：列出存在的镜像；\nimport：导入一个文件（典型为 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" 包）路径或目录来创建一个本地镜像；\ninfo：显示一些相关的系统信息；\ninspect：显示一个容器的具体配置信息；\nkill：关闭一个运行中的容器 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("包括进程和所有相关资源"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\nload：从一个 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" 包中加载一个镜像；\nlogin：注册或登录到一个 Docker 的仓库服务器；\nlogout：从 Docker 的仓库服务器登出；\nlogs：获取容器的 log 信息；\nnetwork：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；\nnode：管理 swarm 集群中的节点，包括查看、更新、删除、提升/取消管理节点等；\npause：暂停一个容器中的所有进程；\nport：查找一个 nat 到一个私有网口的公共口；\nps：列出主机上的容器；\npull：从一个Docker的仓库服务器下拉一个镜像或仓库；\npush：将一个镜像或者仓库推送到一个 Docker 的注册服务器；\nrename：重命名一个容器；\nrestart：重启一个运行中的容器；\nrm：删除给定的若干个容器；\nrmi：删除给定的若干个镜像；\nrun：创建一个新容器，并在其中运行给定命令；\nsave：保存一个镜像为 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" 包文件；\nsearch：在 Docker index 中搜索一个镜像；\nservice：管理 Docker 所启动的应用服务，包括创建、更新、删除等；\nstart：启动一个容器；\nstats：输出（一个或多个）容器的资源使用统计信息；\nstop：终止一个运行中的容器；\nswarm：管理 Docker swarm 集群，包括创建、加入、退出、更新等；\ntag：为一个镜像打标签；\ntop：查看一个容器中的正在运行的进程信息；\nunpause：将一个容器内所有的进程从暂停状态中恢复；\nupdate：更新指定的若干容器的配置信息；\nversion：输出 Docker 的版本信息；\nvolume：管理 Docker volume，包括查看、创建、删除等；\nwait：阻塞直到一个容器终止，然后输出它的退出符。\n")])])]),a("h2",{attrs:{id:"一张图总结-docker-的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一张图总结-docker-的命令"}},[s._v("#")]),s._v(" 一张图总结 Docker 的命令")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://funtl.com/assets/cmd_logic.png",alt:"Docker 命令总结"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);