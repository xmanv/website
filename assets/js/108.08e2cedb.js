(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{710:function(e,r,t){"use strict";t.r(r);var a=t(1),o=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-入门教程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门教程"}},[e._v("#")]),e._v(" Docker 入门教程")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),t("OutboundLink")],1),e._v(",\t作者： "),t("a",{attrs:{href:"http://www.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("阮一峰"),t("OutboundLink")],1),e._v(",\t日期： "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/",target:"_blank",rel:"noopener noreferrer"}},[e._v("2018年2月 9日"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("2013年发布至今， "),t("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),t("OutboundLink")],1),e._v(" 一直广受瞩目，被认为可能会改变软件行业。")]),e._v(" "),t("p",[e._v("但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"一、环境配置的难题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、环境配置的难题"}},[e._v("#")]),e._v(" 一、环境配置的难题")]),e._v(" "),t("p",[e._v("软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？")]),e._v(" "),t("p",[e._v("用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。")]),e._v(" "),t("p",[e._v('如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说："它在我的机器可以跑了"（It works on my machine），言下之意就是，其他机器很可能跑不了。')]),e._v(" "),t("p",[e._v("环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。")]),e._v(" "),t("h2",{attrs:{id:"二、虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、虚拟机"}},[e._v("#")]),e._v(" 二、虚拟机")]),e._v(" "),t("p",[e._v("虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。")]),e._v(" "),t("p",[e._v("虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。")]),e._v(" "),t("p",[t("strong",[e._v("（1）资源占用多")])]),e._v(" "),t("p",[e._v("虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。")]),e._v(" "),t("p",[t("strong",[e._v("（2）冗余步骤多")])]),e._v(" "),t("p",[e._v("虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。")]),e._v(" "),t("p",[t("strong",[e._v("（3）启动慢")])]),e._v(" "),t("p",[e._v("启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。")]),e._v(" "),t("h2",{attrs:{id:"三、linux-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、linux-容器"}},[e._v("#")]),e._v(" 三、Linux 容器")]),e._v(" "),t("p",[e._v("由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。")]),e._v(" "),t("p",[e._v("**Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个"),t("a",{attrs:{href:"https://opensource.com/article/18/1/history-low-level-container-runtimes",target:"_blank",rel:"noopener noreferrer"}},[e._v("保护层"),t("OutboundLink")],1),e._v("。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。")]),e._v(" "),t("p",[e._v("由于容器是进程级别的，相比虚拟机有很多优势。")]),e._v(" "),t("p",[t("strong",[e._v("（1）启动快")])]),e._v(" "),t("p",[e._v("容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。")]),e._v(" "),t("p",[t("strong",[e._v("（2）资源占用少")])]),e._v(" "),t("p",[e._v("容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。")]),e._v(" "),t("p",[t("strong",[e._v("（3）体积小")])]),e._v(" "),t("p",[e._v("容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。")]),e._v(" "),t("p",[e._v("总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。")]),e._v(" "),t("h2",{attrs:{id:"四、docker-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、docker-是什么"}},[e._v("#")]),e._v(" 四、Docker 是什么？")]),e._v(" "),t("p",[e._v("**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。")]),e._v(" "),t("p",[e._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),e._v(" "),t("p",[e._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")]),e._v(" "),t("h2",{attrs:{id:"五、docker-的用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、docker-的用途"}},[e._v("#")]),e._v(" 五、Docker 的用途")]),e._v(" "),t("p",[e._v("Docker 的主要用途，目前有三大类。")]),e._v(" "),t("p",[e._v("**（1）提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),e._v(" "),t("p",[e._v("**（2）提供弹性的云服务。**因为 Docker 容器可以随开随关，很适合动态扩容和缩容。")]),e._v(" "),t("p",[e._v("**（3）组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")]),e._v(" "),t("h2",{attrs:{id:"六、docker-的安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、docker-的安装"}},[e._v("#")]),e._v(" 六、Docker 的安装")]),e._v(" "),t("p",[e._v("Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。")]),e._v(" "),t("p",[e._v("Docker CE 的安装请参考官方文档。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mac"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/debian/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Debian"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CentOS"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/fedora/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fedora"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/binaries/",target:"_blank",rel:"noopener noreferrer"}},[e._v("其他 Linux 发行版"),t("OutboundLink")],1)])])]),e._v(" "),t("p",[e._v("安装完成后，运行下面的命令，验证是否安装成功。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker version\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或者")]),e._v("\n$ docker info\n")])])])]),e._v(" "),t("p",[e._v("Docker 需要用户具有 sudo 权限，为了避免每次命令都输入"),t("code",[e._v("sudo")]),e._v("，可以把用户加入 Docker 用户组（"),t("a",{attrs:{href:"https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("usermod")]),e._v(" -aG docker "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("Docker 是服务器----客户端架构。命令行运行"),t("code",[e._v("docker")]),e._v("命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（"),t("a",{attrs:{href:"https://docs.docker.com/config/daemon/systemd/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# service 命令的用法")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" docker start\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl 命令的用法")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start docker\n")])])])]),e._v(" "),t("h2",{attrs:{id:"六、image-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、image-文件"}},[e._v("#")]),e._v(" 六、image 文件")]),e._v(" "),t("p",[e._v("**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),e._v(" "),t("p",[e._v("image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出本机的所有 image 文件。")]),e._v("\n$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除 image 文件")]),e._v("\n$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("imageName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。")]),e._v(" "),t("p",[e._v("为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),t("OutboundLink")],1),e._v(" 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。")]),e._v(" "),t("h2",{attrs:{id:"七、实例-hello-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、实例-hello-world"}},[e._v("#")]),e._v(" 七、实例：hello world")]),e._v(" "),t("p",[e._v('下面，我们通过最简单的 image 文件"'),t("a",{attrs:{href:"https://hub.docker.com/r/library/hello-world/",target:"_blank",rel:"noopener noreferrer"}},[e._v('hello world"'),t("OutboundLink")],1),e._v("，感受一下 Docker。")]),e._v(" "),t("p",[e._v("需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在"),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一篇文章"),t("OutboundLink")],1),e._v("的第一节。有需要的朋友，可以先看一下。")]),e._v(" "),t("p",[e._v("首先，运行下面的命令，将 image 文件从仓库抓取到本地。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image pull library/hello-world\n")])])])]),e._v(" "),t("p",[e._v("上面代码中，"),t("code",[e._v("docker image pull")]),e._v("是抓取 image 文件的命令。"),t("code",[e._v("library/hello-world")]),e._v("是 image 文件在仓库里面的位置，其中"),t("code",[e._v("library")]),e._v("是 image 文件所在的组，"),t("code",[e._v("hello-world")]),e._v("是 image 文件的名字。")]),e._v(" "),t("p",[e._v("由于 Docker 官方提供的 image 文件，都放在"),t("a",{attrs:{href:"https://hub.docker.com/r/library/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("library")]),t("OutboundLink")],1),e._v("组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image pull hello-world\n")])])])]),e._v(" "),t("p",[e._v("抓取成功以后，就可以在本机看到这个 image 文件了。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("现在，运行这个 image 文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run hello-world\n")])])])]),e._v(" "),t("p",[t("code",[e._v("docker container run")]),e._v("命令会从 image 文件，生成一个正在运行的容器实例。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("docker container run")]),e._v("命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的"),t("code",[e._v("docker image pull")]),e._v("命令并不是必需的步骤。")]),e._v(" "),t("p",[e._v("如果运行成功，你会在屏幕上读到下面的输出。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run hello-world\n\nHello from Docker"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\nThis message shows that your installation appears to be working correctly.\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])])]),e._v(" "),t("p",[e._v("输出这段提示以后，"),t("code",[e._v("hello world")]),e._v("就会停止运行，容器自动终止。")]),e._v(" "),t("p",[e._v("有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run -it ubuntu "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("对于那些不会自动终止的容器，必须使用"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_kill/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker container kill")]),t("OutboundLink")],1),e._v(" 命令手动终止。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("kill")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("h2",{attrs:{id:"八、容器文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、容器文件"}},[e._v("#")]),e._v(" 八、容器文件")]),e._v(" "),t("p",[e._v("**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出本机正在运行的容器")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出本机所有容器，包括终止运行的容器")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" --all\n")])])])]),e._v(" "),t("p",[e._v("上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的"),t("code",[e._v("docker container kill")]),e._v("命令。")]),e._v(" "),t("p",[e._v("终止运行的容器文件，依然会占据硬盘空间，可以使用"),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/container_rm/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("docker container rm")]),t("OutboundLink")],1),e._v("命令删除。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("运行上面的命令之后，再使用"),t("code",[e._v("docker container ls --all")]),e._v("命令，就会发现被删除的容器文件已经消失了。")]),e._v(" "),t("h2",{attrs:{id:"九、dockerfile-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、dockerfile-文件"}},[e._v("#")]),e._v(" 九、Dockerfile 文件")]),e._v(" "),t("p",[e._v("学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。")]),e._v(" "),t("p",[e._v("这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。")]),e._v(" "),t("p",[e._v("下面通过一个实例，演示如何编写 Dockerfile 文件。")]),e._v(" "),t("h2",{attrs:{id:"十、实例-制作自己的-docker-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、实例-制作自己的-docker-容器"}},[e._v("#")]),e._v(" 十、实例：制作自己的 Docker 容器")]),e._v(" "),t("p",[e._v("下面我以 "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/08/koa.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("koa-demos"),t("OutboundLink")],1),e._v(" 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。")]),e._v(" "),t("p",[e._v("作为准备工作，请先"),t("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/archive/master.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载源码"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/ruanyf/koa-demos.git\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" koa-demos\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_10-1-编写-dockerfile-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-编写-dockerfile-文件"}},[e._v("#")]),e._v(" 10.1 编写 Dockerfile 文件")]),e._v(" "),t("p",[e._v("首先，在项目的根目录下，新建一个文本文件"),t("code",[e._v(".dockerignore")]),e._v("，写入下面的"),t("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/.dockerignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("内容"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v(".git\nnode_modules\nnpm-debug.log\n")])])])]),e._v(" "),t("p",[e._v("上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。")]),e._v(" "),t("p",[e._v("然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的"),t("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("内容"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM node:8.4\nCOPY "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /app\nWORKDIR /app\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --registry"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://registry.npm.taobao.org\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("上面代码一共五行，含义如下。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("FROM node:8.4")]),e._v("：该 image 文件继承官方的 node image，冒号表示标签，这里标签是"),t("code",[e._v("8.4")]),e._v("，即8.4版本的 node。")]),e._v(" "),t("li",[t("code",[e._v("COPY . /app")]),e._v("：将当前目录下的所有文件（除了"),t("code",[e._v(".dockerignore")]),e._v("排除的路径），都拷贝进入 image 文件的"),t("code",[e._v("/app")]),e._v("目录。")]),e._v(" "),t("li",[t("code",[e._v("WORKDIR /app")]),e._v("：指定接下来的工作路径为"),t("code",[e._v("/app")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("RUN npm install")]),e._v("：在"),t("code",[e._v("/app")]),e._v("目录下，运行"),t("code",[e._v("npm install")]),e._v("命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。")]),e._v(" "),t("li",[t("code",[e._v("EXPOSE 3000")]),e._v("：将容器 3000 端口暴露出来， 允许外部连接这个端口。")])])]),e._v(" "),t("h3",{attrs:{id:"_10-2-创建-image-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-创建-image-文件"}},[e._v("#")]),e._v(" 10.2 创建 image 文件")]),e._v(" "),t("p",[e._v("有了 Dockerfile 文件以后，就可以使用"),t("code",[e._v("docker image build")]),e._v("命令创建 image 文件了。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image build -t koa-demo "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或者")]),e._v("\n$ docker image build -t koa-demo:0.0.1 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("上面代码中，"),t("code",[e._v("-t")]),e._v("参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是"),t("code",[e._v("latest")]),e._v("。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。")]),e._v(" "),t("p",[e._v("如果运行成功，就可以看到新生成的 image 文件"),t("code",[e._v("koa-demo")]),e._v("了。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_10-3-生成容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-生成容器"}},[e._v("#")]),e._v(" 10.3 生成容器")]),e._v(" "),t("p",[t("code",[e._v("docker container run")]),e._v("命令会从 image 文件生成容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":3000 -it koa-demo /bin/bash\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或者")]),e._v("\n$ docker container run -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":3000 -it koa-demo:0.0.1 /bin/bash\n")])])])]),e._v(" "),t("p",[e._v("上面命令的各个参数含义如下：")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("-p")]),e._v("参数：容器的 3000 端口映射到本机的 8000 端口。")]),e._v(" "),t("li",[t("code",[e._v("-it")]),e._v("参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。")]),e._v(" "),t("li",[t("code",[e._v("koa-demo:0.0.1")]),e._v("：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。")]),e._v(" "),t("li",[t("code",[e._v("/bin/bash")]),e._v("：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。")])])]),e._v(" "),t("p",[e._v("如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("root@66d80f4aaf1e:/app"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("root@66d80f4aaf1e:/app"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# node demos/01.js")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v('这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 http://127.0.0.1:8000，网页显示"Not Found"，这是因为这个 '),t("a",{attrs:{href:"https://github.com/ruanyf/koa-demos/blob/master/demos/01.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo"),t("OutboundLink")],1),e._v(" 没有写路由。")]),e._v(" "),t("p",[e._v("这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。")]),e._v(" "),t("p",[e._v("现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用"),t("code",[e._v("docker container kill")]),e._v("终止容器运行。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 在本机的另一个终端窗口，查出容器的 ID")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 停止指定的容器运行")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("kill")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("容器停止运行之后，并不会消失，用下面的命令删除容器文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查出容器的 ID")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" --all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除指定的容器文件")]),e._v("\n$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("也可以使用"),t("code",[e._v("docker container run")]),e._v("命令的"),t("code",[e._v("--rm")]),e._v("参数，在容器终止运行后自动删除容器文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run --rm -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":3000 -it koa-demo /bin/bash\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_10-4-cmd-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-cmd-命令"}},[e._v("#")]),e._v(" 10.4 CMD 命令")]),e._v(" "),t("p",[e._v("上一节的例子里面，容器启动以后，需要手动输入命令"),t("code",[e._v("node demos/01.js")]),e._v("。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM node:8.4\nCOPY "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /app\nWORKDIR /app\nRUN "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --registry"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://registry.npm.taobao.org\nEXPOSE "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),e._v("\nCMD node demos/01.js\n")])])])]),e._v(" "),t("p",[e._v("上面的 Dockerfile 里面，多了最后一行"),t("code",[e._v("CMD node demos/01.js")]),e._v("，它表示容器启动后自动执行"),t("code",[e._v("node demos/01.js")]),e._v("。")]),e._v(" "),t("p",[e._v("你可能会问，"),t("code",[e._v("RUN")]),e._v("命令与"),t("code",[e._v("CMD")]),e._v("命令的区别在哪里？简单说，"),t("code",[e._v("RUN")]),e._v("命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；"),t("code",[e._v("CMD")]),e._v("命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个"),t("code",[e._v("RUN")]),e._v("命令，但是只能有一个"),t("code",[e._v("CMD")]),e._v("命令。")]),e._v(" "),t("p",[e._v("注意，指定了"),t("code",[e._v("CMD")]),e._v("命令以后，"),t("code",[e._v("docker container run")]),e._v("命令就不能附加命令了（比如前面的"),t("code",[e._v("/bin/bash")]),e._v("），否则它会覆盖"),t("code",[e._v("CMD")]),e._v("命令。现在，启动容器可以使用下面的命令。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run --rm -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":3000 -it koa-demo:0.0.1\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_10-5-发布-image-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-发布-image-文件"}},[e._v("#")]),e._v(" 10.5 发布 image 文件")]),e._v(" "),t("p",[e._v("容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。")]),e._v(" "),t("p",[e._v("首先，去 "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("hub.docker.com"),t("OutboundLink")],1),e._v(" 或 "),t("a",{attrs:{href:"https://cloud.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("cloud.docker.com"),t("OutboundLink")],1),e._v(" 注册一个账户。然后，用下面的命令登录。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker login\n")])])])]),e._v(" "),t("p",[e._v("接着，为本地的 image 标注用户名和版本。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image tag "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("imageName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("repository"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 实例")]),e._v("\n$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1\n")])])])]),e._v(" "),t("p",[e._v("也可以不标注用户名，重新构建一下 image 文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image build -t "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("repository"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("最后，发布 image 文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker image push "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("username"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("repository"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。")]),e._v(" "),t("h2",{attrs:{id:"十一、其他有用的命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十一、其他有用的命令"}},[e._v("#")]),e._v(" 十一、其他有用的命令")]),e._v(" "),t("p",[e._v("docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。")]),e._v(" "),t("p",[t("strong",[e._v("（1）docker container start")])]),e._v(" "),t("p",[e._v("前面的"),t("code",[e._v("docker container run")]),e._v("命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用"),t("code",[e._v("docker container start")]),e._v("命令，它用来启动已经生成、已经停止运行的容器文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container start "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[t("strong",[e._v("（2）docker container stop")])]),e._v(" "),t("p",[e._v("前面的"),t("code",[e._v("docker container kill")]),e._v("命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而"),t("code",[e._v("docker container stop")]),e._v("命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v(" container stop "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。")]),e._v(" "),t("p",[t("strong",[e._v("（3）docker container logs")])]),e._v(" "),t("p",[t("code",[e._v("docker container logs")]),e._v("命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果"),t("code",[e._v("docker run")]),e._v("命令运行容器的时候，没有使用"),t("code",[e._v("-it")]),e._v("参数，就要用这个命令查看输出。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container logs "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[t("strong",[e._v("（4）docker container exec")])]),e._v(" "),t("p",[t("code",[e._v("docker container exec")]),e._v("命令用于进入一个正在运行的 docker 容器。如果"),t("code",[e._v("docker run")]),e._v("命令运行容器的时候，没有使用"),t("code",[e._v("-it")]),e._v("参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containerID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" /bin/bash\n")])])])]),e._v(" "),t("p",[t("strong",[e._v("（5）docker container cp")])]),e._v(" "),t("p",[t("code",[e._v("docker container cp")]),e._v("命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("containID"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("/path/to/file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("非常感谢你一直读到了这里，这个系列还有"),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一篇"),t("OutboundLink")],1),e._v("，介绍如何使用 Docker 搭建真正的网站，欢迎"),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("继续阅读"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("（完）")]),e._v(" "),t("h1",{attrs:{id:"docker-微服务教程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-微服务教程"}},[e._v("#")]),e._v(" Docker 微服务教程")]),e._v(" "),t("p",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),t("OutboundLink")],1),e._v(",\t作者： "),t("a",{attrs:{href:"http://www.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("阮一峰"),t("OutboundLink")],1),e._v(",\t日期： "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/",target:"_blank",rel:"noopener noreferrer"}},[e._v("2018年2月13日"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Docker 是一个容器工具，提供虚拟环境。很多人认为，它改变了我们对软件的认识。")]),e._v(" "),t("p",[e._v("站在 Docker 的角度，软件就是容器的组合：业务逻辑容器、数据库容器、储存容器、队列容器......Docker 使得软件可以拆分成若干个标准化容器，然后像搭积木一样组合起来。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021306.png",alt:"img"}})]),e._v(" "),t("p",[e._v("这正是微服务（microservices）的思想：软件把任务外包出去，让各种外部服务完成这些任务，软件本身只是底层服务的调度中心和组装层。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021302.png",alt:"img"}})]),e._v(" "),t("p",[e._v("微服务很适合用 Docker 容器实现，每个容器承载一个服务。一台计算机同时运行多个容器，从而就能很轻松地模拟出复杂的微服务架构。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021303.png",alt:"img"}})]),e._v(" "),t("p",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("上一篇教程"),t("OutboundLink")],1),e._v("介绍了 Docker 的概念和基本用法，本文接着往下介绍，如何在一台计算机上实现多个服务，让它们互相配合，组合出一个应用程序。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021304.png",alt:"img"}})]),e._v(" "),t("p",[e._v("我选择的示例软件是 "),t("a",{attrs:{href:"https://wordpress.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WordPress"),t("OutboundLink")],1),e._v('。它是一个常用软件，全世界用户据说超过几千万。同时它又非常简单，只要两个容器就够了（业务容器 + 数据库容器），很适合教学。而且，这种"业务 + 数据库"的容器架构，具有通用性，许多应用程序都可以复用。')]),e._v(" "),t("p",[e._v("为了加深读者理解，本文采用三种方法，演示如何架设 WordPress 网站。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("方法 A：自建 WordPress 容器")]),e._v(" "),t("li",[e._v("方法 B：采用官方的 WordPress 容器")]),e._v(" "),t("li",[e._v("方法 C：采用 Docker Compose 工具")])])]),e._v(" "),t("h2",{attrs:{id:"一、预备工作-image-仓库的镜像网址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、预备工作-image-仓库的镜像网址"}},[e._v("#")]),e._v(" 一、预备工作：image 仓库的镜像网址")]),e._v(" "),t("p",[e._v("本教程需要从仓库下载 image 文件，但是国内访问 Docker 的官方仓库很慢，还经常断线，所以要把仓库网址改成国内的镜像站。这里推荐使用官方镜像 registry.docker-cn.com 。下面是我的 Debian 系统的默认仓库修改方法，其他系统的修改方法参考"),t("a",{attrs:{href:"https://www.docker-cn.com/registry-mirror",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("打开"),t("code",[e._v("/etc/default/docker")]),e._v("文件（需要"),t("code",[e._v("sudo")]),e._v("权限），在文件的底部加上一行。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DOCKER_OPTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--registry-mirror=https://registry.docker-cn.com"')]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("然后，重启 Docker 服务。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" docker restart\n")])])])]),e._v(" "),t("p",[e._v("现在就会自动从镜像仓库下载 image 文件了。")]),e._v(" "),t("h2",{attrs:{id:"二、方法-a-自建-wordpress-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、方法-a-自建-wordpress-容器"}},[e._v("#")]),e._v(" 二、方法 A：自建 WordPress 容器")]),e._v(" "),t("p",[e._v("前面说过，本文会用三种方法演示 WordPress 的安装。第一种方法就是自建 WordPress 容器。")]),e._v(" "),t("h3",{attrs:{id:"_2-1-官方-的-php-image"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-官方-的-php-image"}},[e._v("#")]),e._v(" 2.1 官方 的 PHP image")]),e._v(" "),t("p",[e._v("首先，新建一个工作目录，并进入该目录。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" docker-demo "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" docker-demo\n")])])])]),e._v(" "),t("p",[e._v("然后，执行下面的命令。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --volume "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v('/"')]),e._v(":/var/www/html "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  php:5.6-apache\n")])])])]),e._v(" "),t("p",[e._v("上面的命令基于"),t("code",[e._v("php")]),e._v("的 image 文件新建一个容器，并且运行该容器。"),t("code",[e._v("php")]),e._v("的标签是"),t("code",[e._v("5.6-apache")]),e._v("，说明装的是 PHP 5.6，并且自带 Apache 服务器。该命令的三个参数含义如下。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("--rm")]),e._v("：停止运行后，自动删除容器文件。")]),e._v(" "),t("li",[t("code",[e._v("--name wordpress")]),e._v("：容器的名字叫做"),t("code",[e._v("wordpress")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v('--volume "$PWD/":/var/www/html')]),e._v("：将当前目录（"),t("code",[e._v("$PWD")]),e._v("）映射到容器的"),t("code",[e._v("/var/www/html")]),e._v("（Apache 对外访问的默认目录）。因此，当前目录的任何修改，都会反映到容器里面，进而被外部访问到。")])])]),e._v(" "),t("p",[e._v("运行上面的命令以后，如果一切正常，命令行会提示容器对外的 IP 地址，请记下这个地址，我们要用它来访问容器。我分配到的 IP 地址是 172.17.0.2。")]),e._v(" "),t("p",[e._v("打开浏览器，访问 172.17.0.2，你会看到下面的提示。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("Forbidden\nYou don't have permission to access / on this server.\n")])])])]),e._v(" "),t("p",[e._v("这是因为容器的"),t("code",[e._v("/var/www/html")]),e._v("目录（也就是本机的"),t("code",[e._v("docker-demo")]),e._v("目录）下面什么也没有，无法提供可以访问的内容。")]),e._v(" "),t("p",[e._v("请在本机的"),t("code",[e._v("docker-demo")]),e._v("目录下面，添加一个最简单的 PHP 文件"),t("code",[e._v("index.php")]),e._v("。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("?php \nphpinfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n?"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("保存以后，浏览器刷新"),t("code",[e._v("172.17.0.2")]),e._v("，应该就会看到熟悉的"),t("code",[e._v("phpinfo")]),e._v("页面了。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021305.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"_2-2-拷贝-wordpress-安装包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-拷贝-wordpress-安装包"}},[e._v("#")]),e._v(" 2.2 拷贝 WordPress 安装包")]),e._v(" "),t("p",[e._v("既然本地的"),t("code",[e._v("docker-demo")]),e._v("目录可以映射到容器里面，那么把 WordPress 安装包拷贝到"),t("code",[e._v("docker-demo")]),e._v("目录下，不就可以通过容器访问到 WordPress 的安装界面了吗？")]),e._v(" "),t("p",[e._v("首先，在"),t("code",[e._v("docker-demo")]),e._v("目录下，执行下面的命令，抓取并解压 WordPress 安装包。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" -xvf wordpress-4.9.4-zh_CN.tar.gz\n")])])])]),e._v(" "),t("p",[e._v("解压以后，WordPress 的安装文件会在"),t("code",[e._v("docker-demo/wordpress")]),e._v("目录下。")]),e._v(" "),t("p",[e._v("这时浏览器访问"),t("code",[e._v("http://172.17.0.2/wordpress")]),e._v("，就能看到 WordPress 的安装提示了。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021307.png",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"_2-3-官方的-mysql-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-官方的-mysql-容器"}},[e._v("#")]),e._v(" 2.3 官方的 MySQL 容器")]),e._v(" "),t("p",[e._v("WordPress 必须有数据库才能安装，所以必须新建 MySQL 容器。")]),e._v(" "),t("p",[e._v("打开一个新的命令行窗口，执行下面的命令。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -d "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpressdb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_DATABASE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  mysql:5.7\n")])])])]),e._v(" "),t("p",[e._v("上面的命令会基于 MySQL 的 image 文件（5.7版本）新建一个容器。该命令的五个命令行参数的含义如下。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("-d")]),e._v("：容器启动后，在后台运行。")]),e._v(" "),t("li",[t("code",[e._v("--rm")]),e._v("：容器终止运行后，自动删除容器文件。")]),e._v(" "),t("li",[t("code",[e._v("--name wordpressdb")]),e._v("：容器的名字叫做"),t("code",[e._v("wordpressdb")])]),e._v(" "),t("li",[t("code",[e._v("--env MYSQL_ROOT_PASSWORD=123456")]),e._v("：向容器进程传入一个环境变量"),t("code",[e._v("MYSQL_ROOT_PASSWORD")]),e._v("，该变量会被用作 MySQL 的根密码。")]),e._v(" "),t("li",[t("code",[e._v("--env MYSQL_DATABASE=wordpress")]),e._v("：向容器进程传入一个环境变量"),t("code",[e._v("MYSQL_DATABASE")]),e._v("，容器里面的 MySQL 会根据该变量创建一个同名数据库（本例是"),t("code",[e._v("WordPress")]),e._v("）。")])])]),e._v(" "),t("p",[e._v("运行上面的命令以后，正常情况下，命令行会显示一行字符串，这是容器的 ID，表示已经新建成功了。")]),e._v(" "),t("p",[e._v("这时，使用下面的命令查看正在运行的容器，你应该看到"),t("code",[e._v("wordpress")]),e._v("和"),t("code",[e._v("wordpressdb")]),e._v("两个容器正在运行。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("其中，"),t("code",[e._v("wordpressdb")]),e._v("是后台运行的，前台看不见它的输出，必须使用下面的命令查看。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container logs wordpressdb\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-4-定制-php-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-定制-php-容器"}},[e._v("#")]),e._v(" 2.4 定制 PHP 容器")]),e._v(" "),t("p",[e._v("现在 WordPress 容器和 MySQL 容器都已经有了。接下来，要把 WordPress 容器连接到 MySQL 容器了。但是，PHP 的官方 image 不带有"),t("code",[e._v("mysql")]),e._v("扩展，必须自己新建 image 文件。")]),e._v(" "),t("p",[e._v("首先，停掉 WordPress 容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container stop wordpress\n")])])])]),e._v(" "),t("p",[e._v("停掉以后，由于"),t("code",[e._v("--rm")]),e._v("参数的作用，该容器文件会被自动删除。")]),e._v(" "),t("p",[e._v("然后，在"),t("code",[e._v("docker-demo")]),e._v("目录里面，新建一个"),t("code",[e._v("Dockerfile")]),e._v("文件，写入下面的内容。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("FROM php:5.6-apache\nRUN docker-php-ext-install mysqli\nCMD apache2-foreground\n")])])])]),e._v(" "),t("p",[e._v("上面代码的意思，就是在原来 PHP 的 image 基础上，安装"),t("code",[e._v("mysqli")]),e._v("的扩展。然后，启动 Apache。")]),e._v(" "),t("p",[e._v("基于这个 Dockerfile 文件，新建一个名为"),t("code",[e._v("phpwithmysql")]),e._v("的 image 文件。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker build -t phpwithmysql "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-5-wordpress-容器连接-mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-wordpress-容器连接-mysql"}},[e._v("#")]),e._v(" 2.5 Wordpress 容器连接 MySQL")]),e._v(" "),t("p",[e._v("现在基于 phpwithmysql image，重新新建一个 WordPress 容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --volume "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v('/"')]),e._v(":/var/www/html "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --link wordpressdb:mysql "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  phpwithmysql\n")])])])]),e._v(" "),t("p",[e._v("跟上一次相比，上面的命令多了一个参数"),t("code",[e._v("--link wordpressdb:mysql")]),e._v("，表示 WordPress 容器要连到"),t("code",[e._v("wordpressdb")]),e._v("容器，冒号表示该容器的别名是"),t("code",[e._v("mysql")]),e._v("。")]),e._v(" "),t("p",[e._v("这时还要改一下"),t("code",[e._v("wordpress")]),e._v("目录的权限，让容器可以将配置信息写入这个目录（容器内部写入的"),t("code",[e._v("/var/www/html")]),e._v("目录，会映射到这个目录）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" -R "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("777")]),e._v(" wordpress\n")])])])]),e._v(" "),t("p",[e._v("接着，回到浏览器的"),t("code",[e._v("http://172.17.0.2/wordpress")]),e._v('页面，点击"现在就开始！"按钮，开始安装。')]),e._v(" "),t("p",[e._v("WordPress 提示要输入数据库参数。输入的参数如下。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021308.png",alt:"img"}})]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("数据库名："),t("code",[e._v("wordpress")])]),e._v(" "),t("li",[e._v("用户名："),t("code",[e._v("root")])]),e._v(" "),t("li",[e._v("密码："),t("code",[e._v("123456")])]),e._v(" "),t("li",[e._v("数据库主机："),t("code",[e._v("mysql")])]),e._v(" "),t("li",[e._v("表前缀："),t("code",[e._v("wp_")]),e._v("（不变）")])])]),e._v(" "),t("p",[e._v('点击"下一步"按钮，如果 Wordpress 连接数据库成功，就会出现下面的页面，这就表示可以安装了。')]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021309.png",alt:"img"}})]),e._v(" "),t("p",[e._v("至此，自建 WordPress 容器的演示完毕，可以把正在运行的两个容器关闭了（容器文件会自动删除）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container stop wordpress wordpressdb\n")])])])]),e._v(" "),t("h2",{attrs:{id:"三、方法-b-wordpress-官方镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、方法-b-wordpress-官方镜像"}},[e._v("#")]),e._v(" 三、方法 B：Wordpress 官方镜像")]),e._v(" "),t("p",[e._v("上一部分的自建 WordPress 容器，还是挺麻烦的。其实不用这么麻烦，Docker 已经提供了官方 "),t("a",{attrs:{href:"https://hub.docker.com/_/wordpress/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WordPress"),t("OutboundLink")],1),e._v(" image，直接用那个就可以了。有了上一部分的基础，下面的操作就很容易理解了。")]),e._v(" "),t("h3",{attrs:{id:"_3-1-基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基本用法"}},[e._v("#")]),e._v(" 3.1 基本用法")]),e._v(" "),t("p",[e._v("首先，新建并启动 MySQL 容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -d "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpressdb "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_DATABASE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  mysql:5.7\n")])])])]),e._v(" "),t("p",[e._v("然后，基于官方的 WordPress image，新建并启动 WordPress 容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -d "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WORDPRESS_DB_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --link wordpressdb:mysql "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  wordpress\n")])])])]),e._v(" "),t("p",[e._v("上面命令中，各个参数的含义前面都解释过了，其中环境变量"),t("code",[e._v("WORDPRESS_DB_PASSWORD")]),e._v("是 MySQL 容器的根密码。")]),e._v(" "),t("p",[e._v("上面命令指定"),t("code",[e._v("wordpress")]),e._v("容器在后台运行，导致前台看不见输出，使用下面的命令查出"),t("code",[e._v("wordpress")]),e._v("容器的 IP 地址。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container inspect wordpress\n")])])])]),e._v(" "),t("p",[e._v("上面命令运行以后，会输出很多内容，找到"),t("code",[e._v("IPAddress")]),e._v("字段即可。我的机器返回的 IP 地址是"),t("code",[e._v("172.17.0.3")]),e._v("。")]),e._v(" "),t("p",[e._v("浏览器访问"),t("code",[e._v("172.17.0.3")]),e._v("，就会看到 WordPress 的安装提示。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021310.png",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"_3-2-wordpress-容器的定制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-wordpress-容器的定制"}},[e._v("#")]),e._v(" 3.2 WordPress 容器的定制")]),e._v(" "),t("p",[e._v("到了上一步，官方 WordPress 容器的安装就已经成功了。但是，这种方法有两个很不方便的地方。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("每次新建容器，返回的 IP 地址不能保证相同，导致要更换 IP 地址访问 WordPress。")]),e._v(" "),t("li",[e._v("WordPress 安装在容器里面，本地无法修改文件。")])])]),e._v(" "),t("p",[e._v("解决这两个问题很容易，只要新建容器的时候，加两个命令行参数就可以了。")]),e._v(" "),t("p",[e._v("先把刚才启动的 WordPress 容器终止（容器文件会自动删除）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container stop wordpress\n")])])])]),e._v(" "),t("p",[e._v("然后，使用下面的命令新建并启动 WordPress 容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v(" $ docker container run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -d "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.2:8080:80 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --name wordpress "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --env "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WORDPRESS_DB_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --link wordpressdb:mysql "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --volume "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PWD")]),e._v('/wordpress"')]),e._v(":/var/www/html "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  wordpress\n")])])])]),e._v(" "),t("p",[e._v("上面的命令跟前面相比，命令行参数只多出了两个。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("code",[e._v("-p 127.0.0.2:8080:80")]),e._v("：将容器的 80 端口映射到"),t("code",[e._v("127.0.0.2")]),e._v("的"),t("code",[e._v("8080")]),e._v("端口。")]),e._v(" "),t("li",[t("code",[e._v('--volume "$PWD/wordpress":/var/www/html')]),e._v("：将容器的"),t("code",[e._v("/var/www/html")]),e._v("目录映射到当前目录的"),t("code",[e._v("wordpress")]),e._v("子目录。")])])]),e._v(" "),t("p",[e._v("浏览器访问"),t("code",[e._v("127.0.0.2:8080:80")]),e._v("就能看到 WordPress 的安装提示了。而且，你在"),t("code",[e._v("wordpress")]),e._v("子目录下的每次修改，都会反映到容器里面。")]),e._v(" "),t("p",[e._v("最后，终止这两个容器（容器文件会自动删除）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker container stop wordpress wordpressdb\n")])])])]),e._v(" "),t("h2",{attrs:{id:"四、方法-c-docker-compose-工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、方法-c-docker-compose-工具"}},[e._v("#")]),e._v(" 四、方法 C：Docker Compose 工具")]),e._v(" "),t("p",[e._v("上面的方法 B 已经挺简单了，但是必须自己分别启动两个容器，启动的时候，还要在命令行提供容器之间的连接信息。因此，Docker 提供了一种更简单的方法，来管理多个容器的联动。")]),e._v(" "),t("h3",{attrs:{id:"_4-1-docker-compose-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-docker-compose-简介"}},[e._v("#")]),e._v(" 4.1 Docker Compose 简介")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018021311.jpg",alt:"img"}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Compose"),t("OutboundLink")],1),e._v(" 是 Docker 公司推出的一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("YAML"),t("OutboundLink")],1),e._v(" 格式的配置文件"),t("code",[e._v("docker-compose.yml")]),e._v("，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动/关闭这些容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动所有服务")]),e._v("\n$ docker-compose up\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 关闭所有服务")]),e._v("\n$ docker-compose stop\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_4-2-docker-compose-的安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-docker-compose-的安装"}},[e._v("#")]),e._v(" 4.2 Docker Compose 的安装")]),e._v(" "),t("p",[e._v("Mac 和 Windows 在安装 docker 的时候，会一起安装 docker compose。Linux 系统下的安装参考"),t("a",{attrs:{href:"https://docs.docker.com/compose/install/#install-compose",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("安装完成后，运行下面的命令。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker-compose --version\n")])])])]),e._v(" "),t("h3",{attrs:{id:"_4-3-wordpress-示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-wordpress-示例"}},[e._v("#")]),e._v(" 4.3 WordPress 示例")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("docker-demo")]),e._v("目录下，新建"),t("code",[e._v("docker-compose.yml")]),e._v("文件，写入下面的内容。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("mysql:\n    image: mysql:5.7\n    environment:\n     - "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("\n     - "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MYSQL_DATABASE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("wordpress\nweb:\n    image: wordpress\n    links:\n     - mysql\n    environment:\n     - "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WORDPRESS_DB_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("\n    ports:\n     - "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"127.0.0.3:8080:80"')]),e._v("\n    working_dir: /var/www/html\n    volumes:\n     - wordpress:/var/www/html\n")])])])]),e._v(" "),t("p",[e._v("上面代码中，两个顶层标签表示有两个容器"),t("code",[e._v("mysql")]),e._v("和"),t("code",[e._v("web")]),e._v("。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。")]),e._v(" "),t("p",[e._v("启动两个容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker-compose up\n")])])])]),e._v(" "),t("p",[e._v("浏览器访问 http://127.0.0.3:8080，应该就能看到 WordPress 的安装界面。")]),e._v(" "),t("p",[e._v("现在关闭两个容器。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker-compose stop\n")])])])]),e._v(" "),t("p",[e._v("关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker-compose "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v("\n")])])])]),e._v(" "),t("h2",{attrs:{id:"五、参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、参考链接"}},[e._v("#")]),e._v(" 五、参考链接")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.sitepoint.com/how-to-manually-build-docker-containers-for-wordpress/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Manually Build Docker Containers for WordPress"),t("OutboundLink")],1),e._v(", by Aleksander Koko")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.sitepoint.com/how-to-use-the-official-docker-wordpress-image/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Use the Official Docker WordPress Image"),t("OutboundLink")],1),e._v(", by Aleksander Koko")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.sitepoint.com/deploying-wordpress-with-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deploying WordPress with Docker"),t("OutboundLink")],1),e._v(", by Aleksander Koko")])]),e._v(" "),t("p",[e._v("（完）")]),e._v(" "),t("h2",{attrs:{id:"留言-55条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#留言-55条"}},[e._v("#")]),e._v(" 留言（55条）")]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://www.kawabangga.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("laixintao"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("另外提供一个vagrant虚拟机安装wordpress的Vagrantfile：https://github.com/laixintao/vagrant-wordpress")]),e._v(" "),t("p",[e._v("内含Wordpress各个组件的安装脚本。")]),e._v(" "),t("p",[e._v("2018年2月13日 10:34 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385747",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"http://www.majianwei.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("辣条拌鱼翅"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("哈哈, 我还是第一?")]),e._v(" "),t("p",[e._v("一直在用docker, 但是在windows下还是有很多问题. 在慢慢研究中.")]),e._v(" "),t("p",[e._v("win7下可以用 DockerToolbox - 原理是利用VirtualBox")]),e._v(" "),t("p",[e._v("win10可以直接安装, 但VirtualBox就无法使用了, 两者只能用一个.")]),e._v(" "),t("p",[e._v("2018年2月13日 10:40 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385748",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*bluestonechina*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("自从用了docker-compose，我现在很多服务都往docker里扔了")]),e._v(" "),t("p",[e._v("2018年2月13日 11:21 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385749",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*liuderchi*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("請問 『2.1 官方 的 PHP image』段落的第二個指令")]),e._v(" "),t("p",[e._v("docker container run "),t("br"),e._v("\n--rm "),t("br"),e._v("\n--name wordpress "),t("br"),e._v('\n--volume "$PWD/":/var/www/html '),t("br"),e._v("\nphp:5.6-apache")]),e._v(" "),t("p",[e._v("是否需要提供 -p 選項來揭露 port 呢？")]),e._v(" "),t("p",[e._v("2018年2月13日 15:29 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385754",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*andyGe*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("mac机器上不能运行，172.17.0.3访问不了，利用docker-compose运行之后报错如下：\nCreating dockerdemo_mysql_1 ... done\nCreating dockerdemo_mysql_1 ...\nCreating dockerdemo_web_1 ... error")]),e._v(" "),t("p",[e._v("ERROR: for dockerdemo_web_1 Cannot start service web: driver failed programming external connectivity on endpoint dockerdemo_web_1 (e8589fe39aa43060a1c4d2171bc109ffd41f593fb0ea1aede1cbb178c7778797): Error starting userland proxy: listen tcp 127.0.0.3:8080: bind: cannot assign requested address")]),e._v(" "),t("p",[e._v("ERROR: for web Cannot start service web: driver failed programming external connectivity on endpoint dockerdemo_web_1 (e8589fe39aa43060a1c4d2171bc109ffd41f593fb0ea1aede1cbb178c7778797): Error starting userland proxy: listen tcp 127.0.0.3:8080: bind: cannot assign requested address\nERROR: Encountered errors while bringing up the project.")]),e._v(" "),t("p",[e._v("2018年2月14日 11:56 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385766",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*皮皮李*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v('楼上的问题可以试试改变docker-compose.yml 里面的port 设置：\nports:\n- "127.0.0.3:8080:80" 里面 8080 变成 8888.\nMac 上一般apache 已经占用了8080端口。可以设置一下禁止apache自动启动，也可以把端口改一下。')]),e._v(" "),t("p",[e._v("2018年2月18日 07:56 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385776",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://weibo.com/ajaxlogin.php?framelogin=1&callback=parent.sinaSSOController.feedBackUrlCallBack",target:"_blank",rel:"noopener noreferrer"}},[e._v("小胡"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("我也遇到楼上的问题， 改了端口也报同样的错误")]),e._v(" "),t("p",[e._v("2018年2月18日 11:38 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385777",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://www.tonvin.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("灵风子"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("我基于官方镜像library/ubuntu:latest创建了容器，安装了mysql-server 5.7可以正常使用，\n但是退出容器后再次进入，就无法启动mysql server，\n一直提示\n/usr/sbin/mysqld: error while loading shared libraries: libaio.so.1: cannot stat shared object: Permission denied\n请问有人知道这是什么原因吗？")]),e._v(" "),t("p",[e._v("2018年2月20日 10:45 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385785",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*都督府*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\n[Thu Feb 22 10:27:49.568597 2018] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.10 (Debian) PHP/5.6.33 configured -- resuming normal operations\n[Thu Feb 22 10:27:49.568685 2018] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'")]),e._v(" "),t("p",[e._v("本机无法ping通172.17.0.2 不知道这个问题有没有遇到的。。。")]),e._v(" "),t("p",[e._v("2018年2月22日 18:35 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385819",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*win*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\n[Sat Feb 24 07:34:21.648186 2018] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.10 (Debian) PHP/5.6.33 configured -- resuming normal operations\n[Sat Feb 24 07:34:21.648289 2018] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'")]),e._v(" "),t("p",[e._v("mac上一样的问题,\n172.17.0.2ping不通.")]),e._v(" "),t("p",[e._v("2018年2月24日 15:37 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385913",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*暖暖*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("@都督府：")]),e._v(" "),t("p",[e._v("有遇到的，window7 下各种问题，很多命令用不了呀")]),e._v(" "),t("p",[e._v("2018年2月24日 16:49 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385921",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*牙医*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("大神，建议用 Nginx 和 Docker-Gen https://hub.docker.com/r/jwilder/docker-gen/，启动命令设置 Virtual_Host 和 Virtual_Port")]),e._v(" "),t("p",[e._v("2018年2月26日 08:50 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385973",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://github.com/qiaoyuwen",target:"_blank",rel:"noopener noreferrer"}},[e._v("QYW"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("mac上无法ping容器的问题:")]),e._v(" "),t("p",[e._v("https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds")]),e._v(" "),t("p",[e._v("Docker for Mac can’t traffic to containers, and from containers back to the host.")]),e._v(" "),t("p",[e._v("2018年2月26日 12:03 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385991",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*QYW*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("@win：")]),e._v(" "),t("p",[e._v("mac上因为系统限制ping不了docker的容器")]),e._v(" "),t("p",[e._v("所以可以设置-p 8080:80 把端口映射出来")]),e._v(" "),t("p",[e._v("2018年2月26日 12:09 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-385992",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*森*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("在这个WordPress的例子中，把数据存储和程序分成两个container有什么好处么？感觉做成一个container更方便些。")]),e._v(" "),t("p",[e._v("2018年2月26日 14:59 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386016",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*Crazy Boy*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("registry.docker-cn.com已经无法访问")]),e._v(" "),t("p",[e._v("2018年2月26日 16:09 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386023",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*river*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("原文：浏览器访问127.0.0.2:8080:80就能看到 WordPress 的安装提示了。\n原文中8080:80应该为8080。")]),e._v(" "),t("p",[e._v("2018年2月27日 18:05 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386110",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"http://qwerfv.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("liuxueliang"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("阮老师，您好！参照您的教程成功跑起了WordPress，但是这个是内部模拟局域网的ip，怎么在别的机器访问呢？")]),e._v(" "),t("p",[e._v("2018年2月28日 15:43 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386148",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"http://qwerfv.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("liuxueliang"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("是我没仔细看 -p 外网端口：容器端口")]),e._v(" "),t("p",[e._v("2018年2月28日 16:37 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386151",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*DerekNg622*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("教程很棒，从头做了一遍算是入门。")]),e._v(" "),t("p",[e._v("2018年2月28日 16:38 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386152",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*付超*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用Crazy Boy的发言：\n")])])]),t("p",[e._v("registry.docker-cn.com已经无法访问")])]),e._v(" "),t("p",[e._v("相同问题，Mac配置完后重启崩溃")]),e._v(" "),t("p",[e._v("2018年3月 2日 11:31 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386248",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*a14907*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("访问 curl http://172.17.0.2/wordpress\n返回这个：")]),e._v(" "),t("p",[e._v("301 Moved Permanently")]),e._v(" "),t("p",[e._v("Moved Permanently")]),e._v(" "),t("p",[e._v("The document has moved "),t("a",{attrs:{href:"http://172.17.0.2/wordpress/",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Apache/2.4.10 (Debian) Server at 172.17.0.2 Port 80")]),e._v(" "),t("p",[e._v("这个算是wordpress的问题吗？")]),e._v(" "),t("p",[e._v("2018年3月 9日 00:29 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386503",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*海风*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("@win：")]),e._v(" "),t("p",[e._v('在Mac 上 使用 -p 80:80, 然后访问： http://localhost/\ndocker run --rm -p 80:80 --name wordpress --volume "$PWD/":/var/www/html php:5.6-apache')]),e._v(" "),t("p",[e._v("2018年3月21日 04:26 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386886",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*煎鱼*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v('dockercontainerrun−−rm−−namewordpress−−volume"dockercontainerrun−−rm−−namewordpress−−volume"PWD/":/var/www/html php:5.6-apache\nAH00534: apache2: Configuration error: No MPM loaded.')]),e._v(" "),t("p",[e._v("心塞，有小伙伴遇到这个问题吗")]),e._v(" "),t("p",[e._v("2018年3月22日 11:49 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-386950",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*沐雨*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("为社么不把mysql容器中的数据文件影射出来？数据的安全性第一")]),e._v(" "),t("p",[e._v("2018年3月30日 10:38 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387289",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*陆崖*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("- wordpress:/var/www/html\n这里建议用扩展语法,新手容易看不懂,不知道中间没有空格就报错了")]),e._v(" "),t("p",[e._v("2018年4月 3日 12:45 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387431",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*陆崖*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("按照文章的步骤我的出现了一个问题,就是所有静态资源的链接是错误的都404了,静态资源请求的host是127.0.0.1,但实际上应该是一个域名")]),e._v(" "),t("p",[e._v("2018年4月 3日 15:57 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387436",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*陆崖*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用陆崖的发言：\n")])])]),t("p",[e._v("按照文章的步骤我的出现了一个问题,就是所有静态资源的链接是错误的都404了,静态资源请求的host是127.0.0.1,但实际上应该是一个域名")])]),e._v(" "),t("p",[e._v("已经解决了是nginx反向代理的问题")]),e._v(" "),t("p",[e._v("2018年4月 3日 16:15 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387440",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*luckynk*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用皮皮李的发言：\n")])])]),t("p",[e._v('楼上的问题可以试试改变docker-compose.yml 里面的port 设置：\nports:\n- "127.0.0.3:8080:80" 里面 8080 变成 8888.\nMac 上一般apache 已经占用了8080端口。可以设置一下禁止apache自动启动，也可以把端口改一下。')])]),e._v(" "),t("p",[e._v("官方文档说了，mac上不用写127.0.0.3，直接写成8080:80就可以，然后用http://localhost:8080/去访问就可以")]),e._v(" "),t("p",[e._v("2018年4月10日 23:06 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387843",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*luckynk*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("@liuderchi：")]),e._v(" "),t("p",[e._v("我在mac上测试需要，添加-p 8080:80，然后访问的时候用http://localhost:8080/就可以了，不用172.17.0.2这个ip")]),e._v(" "),t("p",[e._v("2018年4月10日 23:15 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-387844",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*sss*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("第一种第二种都试过了，都不行，第一种显示没权限，第二种 wordpress 启动之后一会子关了，日志是说连接不到mysql")]),e._v(" "),t("p",[e._v("2018年5月 4日 00:43 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-388499",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*ZZX*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v('第一种方法，在win10上运行下面的指令\ndocker container run --rm --name wordpress --volume "$PWD/":/var/www/html php:5.6-apache\n报错： Error parsing reference: ":/var/www/html" is not a valid repository/tag: invalid reference format.')]),e._v(" "),t("p",[e._v("这是什么原因？")]),e._v(" "),t("p",[e._v("2018年5月 8日 11:38 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-388662",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*色色程序狗*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("我用java 的springboot 挂在服务器上面用java -jar 启动数据库访问没问题，用noup 命令启动服务器访问不了容器的mysql，用容器内部的ip也访问不了，公网ip3306映射也不能访问，蛋疼n次方")]),e._v(" "),t("p",[e._v("2018年5月17日 10:53 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-388944",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"http://blog.xiaoqi.online/",target:"_blank",rel:"noopener noreferrer"}},[e._v("turbo"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("阮老师，你好，我想问程序运行都会运行相关的文件。现在在一台机器上跑了两个mysql容器。也就是相当于有两个mysql进程。那么两个mysql进程应该各自都有自己的执行文件对吗？这样是不是相当于安装了两次mysql")]),e._v(" "),t("p",[e._v("2018年6月 2日 16:55 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-389331",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*嘿嘿*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("centos7 使用镜像安装方法，firefox打开127.0.0.2:8080没反应，地址直接跳到127.0.0.2，firefox的配置端口也打开了，各位小伙伴遇到过吗？")]),e._v(" "),t("p",[e._v("2018年6月29日 16:22 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-390369",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://blog.csdn.net/qq_34997906",target:"_blank",rel:"noopener noreferrer"}},[e._v("Janche"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("第一种方式生成的IP确实ping不通，不过后面的都可以，建议大家尝试后面的几种方式")]),e._v(" "),t("p",[e._v("2018年10月10日 18:25 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-393869",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*MoLin*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("我在mac下使用如下命令可以正常访问，不知道为什么：")]),e._v(" "),t("p",[e._v('docker container run -p 8080:80 -it --rm --name wordpress --volume "$PWD/":/var/www/html php:5.6-apache')]),e._v(" "),t("p",[e._v("然后可以访问http://localhost:8080")]),e._v(" "),t("p",[e._v("2018年10月17日 20:33 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-394139",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*MoLin*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("解压wordpress后，访问localhost:8080/wordpress报如下的错：\nWarning: require_once(/var/www/html/wordpress/wp-includes/load.php): failed to open stream: No such file or directory in /var/www/html/wordpress/wp-load.php on line 49")]),e._v(" "),t("p",[e._v("Fatal error: require_once(): Failed opening required '/var/www/html/wordpress/wp-includes/load.php' (include_path='.:/usr/local/lib/php') in /var/www/html/wordpress/wp-load.php on line 49")]),e._v(" "),t("p",[e._v("2018年10月17日 20:50 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-394140",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*jemy*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("请问如下如何配置")]),e._v(" "),t("p",[e._v("AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message\n[Thu Nov 08 03:04:10.465347 2018] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/5.6.38 configured -- resuming normal operations\n[Thu Nov 08 03:04:10.465414 2018] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'")]),e._v(" "),t("p",[e._v("2018年11月 8日 11:05 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-394810",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*风*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("看到WordPress都有挂在目录。mysql没有挂载数文件的据目录吗")]),e._v(" "),t("p",[e._v("2018年11月18日 04:43 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-395092",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*pryoman88*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用风的发言：\n")])])]),t("p",[e._v("看到WordPress都有挂在目录。mysql没有挂载数文件的据目录吗")])]),e._v(" "),t("p",[e._v("应该是一个需要一个干净的数据库 然后wordpress在安装时候来使用它，向里面插入数据")]),e._v(" "),t("p",[e._v("2018年11月24日 21:42 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-395638",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*"),t("a",{attrs:{href:"https://kyleduo.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kyleduo"),t("OutboundLink")],1),e._v("*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用QYW的发言：\n")])])]),t("p",[e._v("mac上无法ping容器的问题:")]),e._v(" "),t("p",[e._v("https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds")]),e._v(" "),t("p",[e._v("Docker for Mac can’t traffic to containers, and from containers back to the host.")])]),e._v(" "),t("p",[e._v("查了好久，解决之后发现评论里就有……")]),e._v(" "),t("p",[e._v("2018年12月18日 16:49 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-397655",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*王*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("你这个只是安装了 wordpress mysql 还查个 nginx")]),e._v(" "),t("p",[e._v("2018年12月28日 14:48 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-399145",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*jack*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用辣条拌鱼翅的发言：\n")])])]),t("p",[e._v("哈哈, 我还是第一?")]),e._v(" "),t("p",[e._v("一直在用docker, 但是在windows下还是有很多问题. 在慢慢研究中.")]),e._v(" "),t("p",[e._v("win7下可以用 DockerToolbox - 原理是利用VirtualBox")]),e._v(" "),t("p",[e._v("win10可以直接安装, 但VirtualBox就无法使用了, 两者只能用一个.")])]),e._v(" "),t("p",[e._v("最新版的 VirtualBox 已经解决了这个问题。")]),e._v(" "),t("p",[e._v("2019年3月16日 19:06 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-409958",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*wangdazhang*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("执行 ： docker container run --rm --name wordpress --volume \"$PWD/\":/var/www/html php:5.6-apache\n访问 http://172.17.0.2/index.php\n错误 403 Forbidden\n[Thu Mar 21 07:59:59.356883 2019] [core:error] [pid 16] (13)Permission denied: [client 172.17.0.1:40606] AH00035: access to /index.php denied (filesystem path '/var/www/html/index.php') because search permissions are missing on a component of the path\n怎么解决呢？万分感谢")]),e._v(" "),t("p",[e._v("2019年3月21日 16:04 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-410050",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*zzj*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("我用的mac，所有和host相关的都用-p 8080:80代替就可以了，访问容器服务就用localhost:8080. 这样是可以的")]),e._v(" "),t("p",[e._v("2019年4月16日 17:45 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-410586",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*zzz*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用ZZX的发言：\n")])])]),t("p",[e._v('第一种方法，在win10上运行下面的指令\ndocker container run --rm --name wordpress --volume "$PWD/":/var/www/html php:5.6-apache\n报错： Error parsing reference: ":/var/www/html" is not a valid repository/tag: invalid reference format.')]),e._v(" "),t("p",[e._v("这是什么原因？")])]),e._v(" "),t("p",[e._v('把"pwd"改成pwd"改成{pwd}')]),e._v(" "),t("p",[e._v("2019年5月24日 14:48 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-411352",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*小小小变大*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v('1.映射本地目录到docker容器，运行以下指令：\ndocker container run -d -p 127.0.0.2:8081:80 --rm -v "C:\\Users\\ligy\\Desktop\\pic:/usr/share/nginx/html" --name mynginx01 nginx\n2.浏览器访问报403\n3.不映射目录启动docker容器，访问可进入nginx欢迎页')]),e._v(" "),t("p",[e._v("为什么映射本地目录到docker容器会发生403？")]),e._v(" "),t("p",[e._v("2019年6月21日 10:40 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-411825",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*Christophe*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用海风的发言：\n")])])]),t("p",[e._v("@win：")]),e._v(" "),t("p",[e._v('在Mac 上 使用 -p 80:80, 然后访问： http://localhost/\ndocker run --rm -p 80:80 --name wordpress --volume "$PWD/":/var/www/html php:5.6-apache')])]),e._v(" "),t("p",[e._v("感谢，解决了我的问题")]),e._v(" "),t("p",[e._v("2019年7月 8日 22:19 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-412114",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*someone*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("Win10 下可以使用已安装的Vbox 而且版本还可以更新一点的")]),e._v(" "),t("p",[e._v("2019年7月17日 17:37 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-412250",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*ziPeiJun*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用森的发言：\n")])])]),t("p",[e._v("在这个WordPress的例子中，把数据存储和程序分成两个container有什么好处么？感觉做成一个container更方便些。")])]),e._v(" "),t("p",[e._v("模拟微服务架构")]),e._v(" "),t("p",[e._v("2019年9月10日 16:36 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-413376",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*YBF*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用MoLin的发言：\n")])])]),t("p",[e._v("解压wordpress后，访问localhost:8080/wordpress报如下的错：\nWarning: require_once(/var/www/html/wordpress/wp-includes/load.php): failed to open stream: No such file or directory in /var/www/html/wordpress/wp-load.php on line 49")]),e._v(" "),t("p",[e._v("Fatal error: require_once(): Failed opening required '/var/www/html/wordpress/wp-includes/load.php' (include_path='.:/usr/local/lib/php') in /var/www/html/wordpress/wp-load.php on line 49")])]),e._v(" "),t("p",[e._v("我使用wordpress的其他版本出现和你一样的问题,使用此文章版本就正常了")]),e._v(" "),t("p",[e._v("2019年10月 7日 15:55 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-413843",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*zaier*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v("yaml配置执行shell脚本 权限在哪里加？？")]),e._v(" "),t("p",[e._v("2019年11月13日 23:45 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-414515",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*糊糊晗*")]),e._v(" 说：")])]),e._v(" "),t("p",[e._v('create PWD:"PWD:"{PWD}" includes invalid characters for a local volume name, only "[a-zA-Z0-9][a-zA-Z0-9_.-]"')]),e._v(" "),t("p",[e._v("PWD不能这么命名，PWD不能这么命名，符号不允许，怎么解决")]),e._v(" "),t("p",[e._v("2019年12月18日 11:28 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-415201",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[t("em",[e._v("*糊糊晗*")]),e._v(" 说：")])]),e._v(" "),t("blockquote",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("引用糊糊晗的发言：\n")])])]),t("p",[e._v('create PWD:"PWD:"{PWD}" includes invalid characters for a local volume name, only "[a-zA-Z0-9][a-zA-Z0-9_.-]"')]),e._v(" "),t("p",[e._v("PWD不能这么命名，PWD不能这么命名，符号不允许，怎么解决")])]),e._v(" "),t("p",[e._v("windows版 用 “%cd%”")]),e._v(" "),t("p",[e._v("2019年12月18日 14:27 | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-415209",target:"_blank",rel:"noopener noreferrer"}},[e._v("#"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"}},[e._v("引用"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"我要发表看法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我要发表看法"}},[e._v("#")]),e._v(" 我要发表看法")]),e._v(" "),t("p",[e._v("您的留言 （HTML标签部分可用）")]),e._v(" "),t("p",[e._v("您的大名：")]),e._v(" "),t("p",[e._v("«-必填")]),e._v(" "),t("p",[e._v("电子邮件：")]),e._v(" "),t("p",[e._v("«-必填，不公开")]),e._v(" "),t("p",[e._v("个人网址：")]),e._v(" "),t("p",[e._v("«-我信任你，不会填写广告链接")]),e._v(" "),t("p",[e._v("记住个人信息？")]),e._v(" "),t("p",[e._v("«- 点击按钮")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://www.wangbase.com/blogimg/asset/202001/bg2020013101.jpg",alt:"微信扫描"}})]),e._v(" "),t("p",[t("a",{attrs:{href:"http://weibo.com/ruanyf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Weibo"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"https://twitter.com/ruanyf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),t("OutboundLink")],1),e._v(" | "),t("a",{attrs:{href:"https://github.com/ruanyf",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Email: "),t("a",{attrs:{href:"mailto:yifeng.ruan@gmail.com"}},[e._v("yifeng.ruan@gmail.com")])])])}),[],!1,null,null,null);r.default=o.exports}}]);